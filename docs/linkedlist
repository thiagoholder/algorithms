### Data Structure: Singly Linked List

A singly linked list is a linear data structure where each element is a separate object called a node. Each node consists of two parts:
1. The data (in our case, an integer value).
2. A reference (or "link") to the next node in the sequence.

#### Node Structure:

```csharp
public class Node
{
    public int Value { get; set; }
    public Node Next { get; set; }

    public Node(int value)
    {
        Value = value;
        Next = null;
    }
}
```

In the above code:
- `Value` is the data part of the node.
- `Next` is the reference to the next node in the list. If it's the last node, `Next` will be `null`.

#### Diagram for Node:

```
+-------+    +-------+
| Value |    | Next  | --> Next Node/Null
+-------+    +-------+
```

### LinkedList Class:

The `LinkedList` class is a wrapper around the `Node` class, providing methods to manipulate the list.

```csharp
public class LinkedList
{
    private Node Head { get; set; }
    ...
}
```

- `Head`: This is a reference to the first node in the list. If the list is empty, `Head` is `null`.

#### Methods:

1. **Append**: Adds a node to the end of the list.
2. **Prepend**: Adds a node to the beginning of the list.
3. **DeleteWithValue**: Searches for a node with a specific value and deletes it from the list.

#### Diagram for LinkedList:

```
Head
 |
 v
Node1 [Value: 1 | Next: ref to Node2] --> Node2 [Value: 2 | Next: ref to Node3] --> Node3 [Value: 3 | Next: null]
```

### Explanation:

1. **Append**: This method creates a new node and adds it to the end of the list. If the list is empty, the new node becomes the head. Otherwise, it traverses the list to find the last node and sets its `Next` reference to the new node.

2. **Prepend**: This method creates a new node and sets its `Next` reference to the current head of the list. Then, it updates the head of the list to be the new node, effectively adding the new node to the beginning of the list.

3. **DeleteWithValue**: This method starts by checking if the head itself has the value we want to delete. If so, it updates the head to be the next node. If not, it traverses the list looking for a node with the specified value. Once found, it updates the `Next` reference of the previous node to skip the node with the target value, effectively deleting it from the list.

### Visual Representation:

To better understand the operations, let's visualize them:

1. **Append**:
```
Before: Head -> 1 -> 2 -> null
Append(3)
After:  Head -> 1 -> 2 -> 3 -> null
```

2. **Prepend**:
```
Before: Head -> 2 -> 3 -> null
Prepend(1)
After:  Head -> 1 -> 2 -> 3 -> null
```

3. **DeleteWithValue**:
```
Before: Head -> 1 -> 2 -> 3 -> null
DeleteWithValue(2)
After:  Head -> 1 -> 3 -> null
```

### Detecting a Cycle:

A cycle in a linked list occurs if any node's `Next` reference points to a previous node in the list, which means there's a loop in the list.

#### Floyd's Cycle-Finding Algorithm:

To detect a cycle, we use Floyd's Cycle-Finding Algorithm, also known as the "Tortoise and the Hare" approach. The idea is to have two pointers, one moving slow (tortoise) and the other moving fast (hare). If there's a cycle, the hare will eventually catch up to the tortoise.

```csharp
public static class LinkedListCycleDetector
{
    public static bool HasCycle(Node head)
    {
        if (head == null) return false;

        Node tortoise = head;
        Node hare = head;

        while (hare != null && hare.Next != null)
        {
            tortoise = tortoise.Next;      // Moves one step
            hare = hare.Next.Next;         // Moves two steps

            if (tortoise == hare) return true;  // Cycle detected
        }

        return false;  // No cycle detected
    }
}
```

#### Diagram for Cycle Detection:

```
Node1 [1] --> Node2 [2] --> Node3 [3] --> Node4 [4]
                        ^                       |
                        |                       v
                        +-----------------------+
```

In the above diagram, Node4's `Next` points back to Node2, creating a cycle.

When using the Tortoise and Hare approach:
- Initially, both are at Node1.
- After the first iteration, Tortoise is at Node2, and Hare is at Node3.
- After the second iteration, Tortoise is at Node3, and Hare is back at Node2.
- After the third iteration, Tortoise is at Node4, and Hare is at Node4. They meet, indicating a cycle.

### Conclusion:

The linked list is a fundamental data structure that allows for dynamic size and efficient insertions/deletions. Detecting cycles in a linked list is a common challenge, and Floyd's Cycle-Finding Algorithm provides an efficient solution. The "Tortoise and the Hare" approach is a clever way to detect cycles without using extra space, making it optimal for this challenge.